static LiquidCrystal_I2C _lcd(0x27, 20, 4);

void KCCLCD::setup() {

  _lcd.init();
  _lcd.backlight();

  byte half[8]  = { 0x1F, 0x1F, 0x1F, 0x1F, 0x0, 0x0, 0x0, 0x0 };
  _lcd.createChar(1, half);

  byte lines[4][20] = {
    { 0x20, 0x20,   0xFF, 0x20, 0xFF,   0x20, 0x20, 0x20,   0xFF, 0xFF, 0xFF, 0xFF,   0x20, 0x20, 0x20,   0xFF, 0xFF, 0xFF,   0x20, 0x20 },
    { 0x20, 0x20,   0xFF, 0xFF, 0x20,   0x20, 0x20, 0x20,   0x01, 0x01, 0x01, 0xFF,   0x20, 0x20, 0x20,   0xFF, 0xFF, 0xFF,   0x20, 0x20 }, // Line 2 and 3 are flipped (?)
    { 0x20, 0x20,   0xFF, 0x20, 0xFF,   0x20, 0x20, 0x20,   0xFF, 0x20, 0x20, 0x20,   0x20, 0x20, 0x20,   0xFF, 0x20, 0xFF,   0x20, 0x20 },
    { 0x20, 0x20,   0xFF, 0x20, 0xFF,   0x20, 0x20, 0x20,   0xFF, 0xFF, 0xFF, 0xFF,   0x20, 0x20, 0x20,   0xFF, 0x20, 0x20,   0x20, 0x20 }
  };

  _lcd.home();
  
  for (int i = 0; i < 4; i++)
    for (int j = 0; j < 20; j++)
      _lcd.write(lines[i][j]);

  delay(2000);

  _lcd.clear();

}

template <class T> void KCCLCD::print(uint8_t x, uint8_t y, T w) {
  _lcd.setCursor(x, y);
  _lcd.print(w);
}
